{% extends 'user'|layout %}

{% set page_title = library.name %}

{% block head %}{% endblock %}

{% block content %}
    <h3>{{ page_title }}</h3>

    <b-form inline @submit="fetchBooks" v-on:submit.prevent>
        <b-form-group>
            <b-form-input trim
                          v-model="search"
                          placeholder="{{ 'library.search'|trans }}"
                          v-on:scan="handleScan"
                          :disabled="searching"
                          ref="search"
            >
            </b-form-input>
            <b-button variant="primary" type="submit" :disabled="searching">
                <b-icon icon="search" v-if="!searching"></b-icon>
                <b-spinner small v-if="searching"></b-spinner>
                {{ 'fields.search'|trans }}
            </b-button>
        </b-form-group>
    </b-form>

    <b-row class="mt-3">
        <b-col>
            <b-table striped hover
                     :fields="fields"
                     :items="searchResults">
                <template v-slot:cell(selector)="book">
                    <b-button variant="outline-secondary" class="bg-white" size="sm" @click="setBook(book.item)">
                        <b-icon icon="plus"></b-icon>
                    </b-button>
                </template>
            </b-table>
        </b-col>

        <b-col>
            <b-card :img-src="cover" img-bottom>
                {{ form(bookForm) }}
            </b-card>
        </b-col>
    </b-row>
{% endblock %}

{% block scripts %}
    <script type="text/javascript">
        window.Mixin.add('search', {
            data: {
                searching: false,
                search: '',
                searchResults: [],
                books: {{ library.books|vue }},
                cover: '',

                fields: [
                    {
                        key: 'selector',
                        label: '',
                    },
                    {
                        key: 'title',
                        label: '{{ 'fields.title'|trans }}',
                        sortable: true,
                    },
                    {
                        key: 'authors',
                        label: '{{ 'fields.authors'|trans }}',
                        sortable: true,
                        formatter: (authors) => (authors.join('; ')),
                    },
                    {
                        key: 'year',
                        label: '{{ 'fields.year'|trans }}',
                        sortable: true,
                    },
                    {
                        key: 'isbn',
                        label: '{{ 'fields.isbn'|trans }}',
                    }
                ],
            },

            mounted() {
                this.$refs.search.focus();
            },

            methods: {
                handleScan: function (value) {
                    this.search = value;

                    this.fetchBooks();
                },

                fetchBooks: function () {
                    if (this.search.length === 0) {
                        this.searchResults = [];
                        return;
                    }

                    this.searching = true;

                    axios.post('{{ route('library.search', library.slug) }}', {
                        search: this.search
                    }).then(({ data }) => {
                        this.error = {};
                        this.searchResults = data;

                        if (data.length > 0) {
                            this.setBook(data[0]);
                        }
                    }).catch(({ response }) => {
                        this.error = response;
                        this.searchResults = [];
                    }).then(() => {
                        this.searching = false;
                    });
                },

                setBook: function (book) {
                    this.fillForm('book_form', book);

                    this.cover = book.images.length > 0 ? book.images[0] : '';

                    /*
                    this.cover = '';

                    axios.post('{{ route('library.books.cover', library.slug) }}', {
                        title: book.title,
                        isbn: book.isbn,
                        original_data: book.original_data,
                    }).then(({ data }) => {
                        this.error = {};
                        this.cover = !data ? '' : data;
                    }).catch(({ response }) => {
                        this.error = response;
                    });
                    */
                }
            },
        })
    </script>
{% endblock %}
