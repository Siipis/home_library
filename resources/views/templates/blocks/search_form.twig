{% block search_form %}
    <b-row>
        {% set previousBook = library.books.last() %}
        {% if previousBook is not empty %}
            <b-col class="align-self-center mb-3 mb-lg-0">
                <strong>Viimeksi lis√§tty: </strong>
                <a href="{{ previousBook.link }}">{{ previousBook.title }} ({{ previousBook.authors }})</a>
            </b-col>
        {% endif %}

        <b-col lg="6" sm="12" order-lg="1">
            <b-form inline @submit="fetchBooks" v-on:submit.prevent>
                <b-input-group>
                    <b-form-input trim
                                  v-model="search"
                                  placeholder="{{ 'library.search'|trans }}"
                                  v-on:scan="handleScan"
                                  :disabled="searching"
                                  ref="search"
                    >
                    </b-form-input>
                    <b-button variant="primary" type="submit" :disabled="searching">
                        <b-icon icon="search" v-if="!searching"></b-icon>
                        <b-spinner small v-if="searching"></b-spinner>
                        {{ 'fields.search'|trans }}
                    </b-button>
                </b-input-group>
            </b-form>
        </b-col>
    </b-row>

    <b-row class="mt-3">
        <b-col sm="12" lg="6">
            <template v-if="existingBooks.length > 0">
                <h5 class="text-muted">{{ 'library.existing_books'|trans }}:</h5>
                <b-row class="mb-4">
                    <b-col cols="2" v-for="existing in existingBooks" :key="existing.id">
                        <a :href="existing.link" :title="existing.title">
                            <img :src="existing.cover + '/small'" alt="" class="w-100" />
                        </a>
                    </b-col>
                </b-row>
            </template>

            <template v-if="newBooks.length > 0">
                <h5 class="text-muted">{{ 'library.new_books'|trans }}:</h5>
                <search-results :items="newBooks"></search-results>
            </template>

            <p v-if="showEmptyResultMessage">
                {{ 'library.no_results'|trans }}.
            </p>
        </b-col>

        <b-col sm="12" lg="6">
            <b-button v-b-modal.scanner variant="primary" size="lg" class="w-100 mb-3" :disabled="searching">
                <b-icon icon="camera"></b-icon>
                {{ 'library.scan_isbn'|trans }}
            </b-button>
            <b-card :img-src="cover" img-bottom>
                {% use 'templates.blocks.book_form' %}
                {{ block('book_form') }}
            </b-card>
        </b-col>
    </b-row>

    <b-modal id="scanner" size="xl" centered ok-only>
        <scanner @result="handleMobileScan"
                 :qrbox="500"
                 :fps="10"
        ></scanner>
    </b-modal>
{% endblock %}

{% block search_form_scripts %}
    {{ block('book_form_scripts') }}

    <script type="text/javascript">
        window.Mixin.add('search', {
            data: {
                searching: false,
                search: '',
                searchResults: [],
                submittedOnce: false,
            },

            methods: {
                handleScan: function (value) {
                    this.search = value;

                    this.fetchBooks(true);
                },

                handleMobileScan: function(value) {
                    this.handleScan(value);
                    this.fillForm('book_form', {
                        isbn: value
                    });

                    this.$bvModal.hide('scanner');
                },

                rememberSearch: function() {
                    this.submittedOnce = true;

                    // Store the search to the local ids datalist
                    if (!this.local_ids.includes(this.search)) {
                        this.local_ids = this.local_ids.concat(this.search);
                    }
                },

                fetchBooks: function () {
                    if (this.search.length === 0) {
                        this.searchResults = [];
                        return;
                    }

                    this.rememberSearch();

                    axios.post('{{ route('books.search') }}', {
                        search: this.search,
                        library: '{{ library.slug }}',
                    }).then(({ data }) => {
                        this.searchResults = data;

                        if (data.length > 0) {
                            book = data[0];
                            book.local_id = this.search;

                            this.setBook(book);
                        }
                    }).catch(() => {
                        this.searchResults = [];
                    });
                },
            },

            mounted() {
                const vue = this;
                this.$refs.search.focus();

                axios.interceptors.request.use((config) => {
                    vue.searching = true;

                    return config;
                }, (error) => {
                    vue.error = error.response;
                    vue.searching = false;

                    return Promise.reject(error);
                });

                axios.interceptors.response.use((response) => {
                    vue.searching = false;
                    vue.error = {};

                    return response;
                }, (error) => {
                    vue.searching = false;
                    vue.error = error.response;

                    return Promise.reject(error);
                });
            },

            computed: {
                existingBooks() {
                    return this.searchResults.existing  ?? [];
                },

                newBooks() {
                    return this.searchResults.new ?? [];
                },

                showEmptyResultMessage() {
                    return this.submittedOnce === true && this.searching === false && this.searchResults.length === 0;
                }
            },

            watch: {
                searching: (value) => {
                    const button = document.getElementById('book_form_create');

                    if (button !== null) {
                        button.disabled = value;
                    }
                },
            },
        })
    </script>
{% endblock %}
