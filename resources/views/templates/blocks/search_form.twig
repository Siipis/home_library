{% block search_form %}
    <b-form inline @submit="fetchBooks" v-on:submit.prevent>
        <b-form-group>
            <b-form-input trim
                          v-model="search"
                          placeholder="{{ 'library.search'|trans }}"
                          v-on:scan="handleScan"
                          :disabled="searching"
                          ref="search"
            >
            </b-form-input>
            <b-button variant="primary" type="submit" :disabled="searching">
                <b-icon icon="search" v-if="!searching"></b-icon>
                <b-spinner small v-if="searching"></b-spinner>
                {{ 'fields.search'|trans }}
            </b-button>
        </b-form-group>
    </b-form>

    <b-row class="mt-3">
        <b-col>
            <search-results :items="searchResults"></search-results>
        </b-col>

        <b-col>
            <b-card :img-src="cover" img-bottom>
                {% use 'templates.blocks.book_form' %}
                {{ block('book_form') }}
            </b-card>
        </b-col>
    </b-row>
{% endblock %}

{% block search_form_scripts %}
    {{ block('book_form_scripts') }}

    <script type="text/javascript">
        window.Mixin.add('search', {
            data: {
                searching: false,
                search: '',
                searchResults: [],
            },

            methods: {
                handleScan: function (value) {
                    this.search = value;

                    this.fetchBooks();
                },

                fetchBooks: function () {
                    if (this.search.length === 0) {
                        this.searchResults = [];
                        return;
                    }

                    axios.post('{{ route('library.search', library.slug) }}', {
                        search: this.search
                    }).then(({ data }) => {
                        this.searchResults = data;

                        if (data.length > 0) {
                            this.setBook(data[0]);
                        }
                    }).catch(() => {
                        this.searchResults = [];
                    });
                },
            },

            mounted() {
                const vue = this;
                this.$refs.search.focus();

                axios.interceptors.request.use((config) => {
                    vue.searching = true;

                    return config;
                }, (error) => {
                    vue.error = error.response;
                    vue.searching = false;

                    return Promise.reject(error);
                });

                axios.interceptors.response.use((response) => {
                    vue.searching = false;
                    vue.error = {};

                    return response;
                }, (error) => {
                    vue.searching = false;
                    vue.error = error.response;

                    return Promise.reject(error);
                });
            },

            watch: {
                searching: (value) => {
                    const button = document.getElementById('book_form_create');

                    if (button !== null) {
                        button.disabled = value;
                    }
                },
            },
        })
    </script>
{% endblock %}
